% Drawing individual composition profiles for each species in a converged
% SCFT solution.

function individual_profiles(R,x,y,z,dim,options)
    %% Define all input variables and name/value pair options:
    arguments
        
        % The first parameter of this function, R, is "overloaded". This
        % means that the function accepts either a string or a data array 
        % for the first parameter, and it will work correctly either way. 
        
        % If the first parameter is a string, we assume it is a filename
        % that contains the data we wish to plot. Thus, we will use
        % read_rgrid.m to collect the data that will be plotted.
        
        % If the first parameter is instead a data array, it must contain
        % all of the composition data stored in the rgrid file. For an
        % N-dimensional system, R must be an (N+1)-dimensional array. In
        % 3D, R(i,j,k,l) gives the composition of species l at gridpoint
        % (i,j,k). 
        R
        
        % If R is a data array, then the real-space coordinates
        % corresponding to those data must be provided as well. For a 2D
        % system, x and y are needed, while z is also needed in 3D. For a
        % system discretized into an i x j x k grid, these arrays must
        % have size (i,j,k), where x(i,j,k) corresponds to the x-coordinate
        % of the data points in R(i,j,k,:), and so on for y and z.
        
        % x and y are only made optional to allow for the user to run
        % individual_profiles(filename) without causing an error.
        % If the first input parameter is a filename (a string), x, y, and 
        % z are deleted and regenerated by the function read_rgrid.
        % However, if R is a data array and x and y are not provided, an
        % error will occur.
        x = []
        y = []
        z = []
        dim = 0
        
        % ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        % The rest of the inputs are optional name-value pair inputs:

        % savefile is a filename to which the figures will be saved.
        % The file extension provided (e.g. ".fig" or ".png") will be used
        % to determine the type of file to save. Since this function
        % typically generates more than 1 figure, we append mono_label(i)
        % to the end of the filename when saving the composition profile
        % for species i. If left empty (which is the default behavior), the
        % figures are not saved.
        options.savefile = "";

        % resolution is a number that specifies the resolution of the
        % figure that is saved (if options.savefile is specified), in dots
        % per inch (dpi). Default value is 300. If set to 0, file is saved
        % at screen resolution.
        options.resolution = 300;

        % species is an array that contains the indices for each monomer
        % species to plot. So, if the data set contains 4 species but only
        % the first and third should be plotted, species = [1,3]. The
        % default behavior is to plot all species.
        options.species;

        % fontsize specifies the FontSize parameter for the axis on which
        % data are plotted. Default value is 14.
        options.fontsize = 14;

        % title specifies a string to use as the figure title. If title is
        % provided, all figures will have the same title. Otherwise, title
        % will be "{} Block Density Profile" where {} is replaced by
        % mono_label(i) for species i. 
        options.title = "default (will be replaced)";

        % fieldId is an ptional index to specify which field to read from 
        % an FTS simulation output file. Default = 0. If the input file is 
        % not an FTS simulation output file, or if R, x, y, and z are 
        % provided as input data arrays, this parameter does nothing.
        options.fieldId = 0;
        
        % hex3 is a boolean indicating whether to plot 3 unit cells for a
        % hexagonal system rather than 1. 
        options.hex3 = false

        % light is a boolean indicating whether to insert a "light" object
        % into the plot (adds shadows that can make 3d structure clearer,
        % but invalidates the accuracy of the colorbar).
        options.light = false;

        % view is a 1, 2, or 3-element vector that specifies the viewing
        % angle of the figure(s). If this is included, we call 
        % view(options.view) to set the viewing angle, so options.view must
        % be something that complies with the view() function. If view = 2
        % or view = 3, the view will be the default 2D or 3D view,
        % respectively. If view is a 2-element vector, the two elements
        % correspond to the azimuth and elevation angles, respectively. If
        % view is a 3-element vector, the values represent a vector that
        % points from the origin to the viewer. 
        options.view;

        % If hide_axes is set to true, the plot will not contain the tick 
        % marks, title, etc. by setting the "visible" property of the axes
        % to "off".
        options.hide_axes = false;

        % If hide_colorbars is set to true, the colorbars will not be shown
        options.hide_colorbars = false;
        
        % isovalue is an array of isovalues representing the minimum volume
        % fraction to show on plot. One for each species. If not specified,
        % we call get_isovalues.m to calculate them automatically.
        options.isovalue

        % max_comps is a double or an array specifying the maximum
        % composition to be shown on the colorbar for each species. If it
        % is a double, the max composition will be set to that value for
        % all species. If it is an array, the array should contain one
        % entry for each species, giving the maximum composition for each.
        % If not provided by user, the max composition used is the max
        % composition for that species in the entire system.
        options.max_comps
        
        % mono_label contains labels for each monomer species. If not
        % specified, we use ["A","B","C",...] as the default behavior.
        options.mono_label
         
        % opacity contains values of opacity to plot for each species. 2
        % opacities are specified for each species i: opacity(1,i) is the
        % opacity of the interior of the domains, while opacity(2,i) is the
        % opacity of the exterior (caps) of the domains. If unspecified,
        % all values default to 1 (completely opaque).
        options.opacity
        
        % map is a cell array containing a colormap for each species.
        % map{i} is the colormap for species i. If unspecified, we use the
        % default colormaps generated by get_colormaps.m.
        options.map
        
        % line_width is the value for "LineWidth" used to draw the outer 
        % box of the unit cell. Default is 1
        options.line_width = 1
        
        % line_color is the value for "EdgeColor" used to draw the outer
        % box of the unit cell. Default is gray. Can be a color string as
        % well, as long as Matlab can interpret it properly as a color,
        % e.g. "y", "yellow", or "#FFFF00" (hexadecimal color code).
        options.line_color = [0.5,0.5,0.5]

        % alim, blim, and clim are 2-element arrays specifying the upper 
        % and lower limits of the region to plot in the 3D composition
        % profiles, in reduced coordinates. Default value is [0,1] for
        % each, which plots a single unit cell. If, say, alim = [0,2], then
        % the profiles will show 2 unit cells along the direction of the 
        % lattice basis vector a.
        options.alim = [0,1];
        options.blim = [0,1];
        options.clim = [0,1];

        % outer_line_color is the color to use to draw an outer box
        % around the entire plotted region. This box differs from the unit
        % cell if the user has specified alim, blim, and/or clim. 
        options.outer_line_color = "None";

        % cb_ticks is the number of ticks on the colorbar, default is 10.
        options.cb_ticks = 10;
        
        % n_digits is the number of digits past the decimal point to use
        % for the colorbar tick labels. Can be specified as a scalar, or as
        % an array of length n_mnr (one value per monomer species plotted)
        % if you want a different # of digits for each colorbar. Default is
        % 3.
        options.n_digits = 3;

        % If your SCFT result is a thin film, you should include
        % film_params as an input to apply a thin film correction.
        %
        % film_params is an array with 4 entries. The first 3 entries
        % correspond to the 3 required parameters in pscfpp that are needed
        % to define a Wall object: normalVec, interfaceThickness, and
        % wallThickness. See pscfpp documentation for details about what
        % each of these three parameters means. The fourth entry is a
        % boolean (i.e. 0 for false, 1 for true) that indicates whether or
        % not to rotate the figure to make the z axis orthogonal to the
        % wall. If this film_params input is included, the code will apply
        % a correction to the plot to make the figure look good as a thin
        % film. If it is not included, it is assumed that the data being
        % plotted are not under a thin film constraint.
        options.film_params;

        % substrate is a boolean indicating whether or not to add a box
        % in the composite profile underneath the unit cell that looks 
        % like a substrate on which the polymer rests. The box color, line
        % edge line color, and edge line width can be set by the inputs
        % substrate_color, substrate_line_color, and substrate_line_width, 
        % respectively. 
        %
        % This feature is compatible with all other features, including the
        % thin film correction. The only requirement that we enforce on the
        % other inputs is that clim(1) must be 0. 
        options.substrate = false;
        options.substrate_color = [0.5,0.5,0.5];
        options.substrate_line_color = 'k';
        options.substrate_line_width = 1;
        
        % top_wall is basically identical to substrate, except it places a
        % box on top of the unit cell rather than below it. The appearance
        % of the top_wall can be altered with top_wall_color,
        % top_wall_line_color, and top_wall_line_width. By default, these
        % appearance-related parameters are set to match the corresponding
        % parameters for the substrate.
        options.top_wall = false;
        options.top_wall_color;
        options.top_wall_line_color;
        options.top_wall_line_width;
        
    end
    
    % Ensure that the code below can access our utilities
    [filepath,~,~] = fileparts(mfilename('fullpath'));
    addpath(filepath+"/utilities")    

    % if a filename is passed to the function, read data from that file
    if ischar(R) || isstring(R) 
        
        clear x y z; % We will determine x, y, and z from the rgrid file
                
        % Read data from file
        [R,x,y,z,dim,lattype] = read_rgrid(R,options.fieldId);
        
        % If hex3 is true, make sure system is actually hexagonal
        if options.hex3 && strcmp(lattype,'hexagonal') == 0
            error("hex3 is true but crystal system is not hexagonal")
        end
    
    % If R is not a string defining a filename, we assume it is a data
    % array containing species compositions. So, below we make sure we have
    % all of the other data we need to proceed, and define some useful
    % variables.
    else
        
        % Make sure that we have x, y, z, and dim:
        if isempty(x) || isempty(y) % if x or y are not provided
            error("Necessary coordinates of data were not provided")
        elseif ndims(x) == 3 && isempty(z) % R is 3D and z is not provided
            error("z coordinates were not provided for 3D data")
        elseif dim ~= 1 && dim ~= 2 && dim ~= 3
            error("dim is a required variable & must be either 1, 2, or 3")
        end

    end

    % Get n_mnr, grid, and basis from the R, x, y, and z arrays
    n_mnr = size(R,4);
    grid = size(x) - 1;
    basis = [x(end,1,1),y(end,1,1),z(end,1,1);
             x(1,end,1),y(1,end,1),z(1,end,1);
             x(1,1,end),y(1,1,end),z(1,1,end)];

    % Apply thin film correction if desired
    if isfield(options,'film_params') && ~isempty(options.film_params)
        [R,x,y,z,basis] = thin_film_correction(R,x,y,z,...
                          options.film_params(1),options.film_params(2),...
                          options.film_params(3),options.film_params(4));
        grid = size(R,1:3) - 1; % Update grid
        if options.film_params(4)
            normalVec = 2; % used by change_cell_lims
        else
            normalVec = options.film_params(1); 
        end
    else
        normalVec = -1; % indicates absence of thin film correction
    end
    
    % Get other parameters needed for composition profiles, using
    % default values if they are not provided as name-value inputs:
    if isfield(options,'species')
        species = options.species;
    else
        species = 1:n_mnr;
    end

    if isfield(options,'mono_label')
        mono_label = options.mono_label;
    else
        mono_label = char(1,n_mnr);
        for in = 1:n_mnr
            mono_label(in) = char('A'+in-1);
        end
    end
    
    if isfield(options,'opacity')
        opacity = options.opacity;
    else
        opacity = ones(2,n_mnr);
    end
    
    if isfield(options,'map')
        map = options.map;
    else
        map = get_colormaps();
    end
    
    if isfield(options,'isovalue')
        isovalue = options.isovalue;
    else
        isovalue = get_isovalues(R,dim,'plot',false);
    end

    if isfield(options,'max_comps')
        max_comps = options.max_comps;
        if numel(max_comps) == 1
            max_comps = ones(1,n_mnr) * max_comps;
        end
    else
        max_comps = zeros(1,n_mnr);
        for in = 1:n_mnr
            max_comps(in) = max(R(:,:,:,in),[],'all');
        end
    end
    
    if isscalar(options.n_digits)
        n_digits = ones(1,n_mnr) * options.n_digits;
    else
        if length(options.n_digits) ~= n_mnr
            error('n_digits must be a scalar or an array of length n_mnr')
        end
        n_digits = options.n_digits;
    end

    if isfield(options,'view')
        view_angle = options.view;
    else
        view_angle = 3;
    end

    % If style inputs are unset, make them match the substrate
    if ~isfield(options,"top_wall_color")
        options.top_wall_color = options.substrate_color;
    end
    if ~isfield(options,"top_wall_line_color")
        options.top_wall_line_color = options.substrate_line_color;
    end
    if ~isfield(options,"top_wall_line_width")
        options.top_wall_line_width = options.substrate_line_width;
    end

    % If user specified plot axis limits other than [0,1], adjust
    std_lims = [0,1;0,1;0,1];
    lims = [options.alim;options.blim;options.clim];
    if ~isequal(lims,std_lims)
        % This option is not compatible with the hex3 option, so check to
        % make sure hex3 is false
        if options.hex3
            error("cannot combine alim, blim, or clim inputs with hex3")
        end

        [R,x,y,z] = change_cell_lims(R,x,y,z,'alim',options.alim, ...
                                     'blim',options.blim, ...
                                     'clim',options.clim, ...
                                     'normalVec',normalVec);
    end
    
    resolution = options.resolution;
    hex3 = options.hex3; 
    line_width = options.line_width; 
    line_color = options.line_color;
    outer_line_color = options.outer_line_color;
    fig_title = options.title;
    cb_ticks = options.cb_ticks;
    savefile = options.savefile;
    fontsize = options.fontsize;
    light_on = options.light;
    hide_axes = options.hide_axes;
    hide_colorbars = options.hide_colorbars;
    alims = options.alim;
    blims = options.blim;
    clims = options.clim;
    substrate = options.substrate;
    top_wall = options.top_wall;
    substrate_color = options.substrate_color;
    substrate_line_color = options.substrate_line_color;
    substrate_line_width = options.substrate_line_width;
    top_wall_color = options.top_wall_color;
    top_wall_line_color = options.top_wall_line_color;
    top_wall_line_width = options.top_wall_line_width;

    clear options
    
    %% Create the composition profile for each species
    for in = species
        
        figure(); hold on; set(gca,'fontsize',fontsize)
        if fig_title == "default (will be replaced)"
            title(strcat(mono_label(in),' Block Density Profile'))
        else
            title(fig_title)
        end

        % Plot isosurfaces, isocaps, and unit cell outlines
        if (normalVec == -1) || ((lims(normalVec+1,1) >= 0) && ...
           (lims(normalVec+1,2) <= 1))

            % This should almost always be called
            patch(isosurface(x,y,z,R(:,:,:,in),isovalue(in)), ...
                  'FaceColor',map{in}(1,:),'EdgeColor','none',...
                  'FaceAlpha',opacity(1,in));
            patch(isocaps(x,y,z,R(:,:,:,in),isovalue(in)), ...
                  'FaceColor','interp','EdgeColor','none', ...
                  'FaceAlpha',opacity(2,in));

        else 
            
            % This handles the rare case in which we need to plot multiple
            % layers of a thin film, separated by empty space. 
            unit_cells = get_cell_start_points(lims(normalVec+1,:),...
                                               grid(normalVec+1)+1);
            for i = 1:(length(unit_cells)-1)
                bds = unit_cells(i):unit_cells(i+1)-1; % unit cell bounds
                if normalVec == 0
                    patch(isosurface(x(bds,:,:),y(bds,:,:),z(bds,:,:),...
                          R(bds,:,:,in),isovalue(in)),'FaceColor',...
                          map{in}(1,:),'EdgeColor','none','FaceAlpha',...
                          opacity(1,in));
                    patch(isocaps(x(bds,:,:),y(bds,:,:),z(bds,:,:),...
                          R(bds,:,:,in),isovalue(in)),'FaceColor',...
                          'interp','EdgeColor','none','FaceAlpha',...
                          opacity(2,in));
                elseif normalVec == 1
                    patch(isosurface(x(:,bds,:),y(:,bds,:),z(:,bds,:),...
                          R(:,bds,:,in),isovalue(in)),'FaceColor',...
                          map{in}(1,:),'EdgeColor','none','FaceAlpha',...
                          opacity(1,in));
                    patch(isocaps(x(:,bds,:),y(:,bds,:),z(:,bds,:),...
                          R(:,bds,:,in),isovalue(in)),'FaceColor',...
                          'interp','EdgeColor','none','FaceAlpha',...
                          opacity(2,in));
                elseif normalVec == 2
                    patch(isosurface(x(:,:,bds),y(:,:,bds),z(:,:,bds),...
                          R(:,:,bds,in),isovalue(in)),'FaceColor',...
                          map{in}(1,:),'EdgeColor','none','FaceAlpha',...
                          opacity(1,in));
                    patch(isocaps(x(:,:,bds),y(:,:,bds),z(:,:,bds),...
                          R(:,:,bds,in),isovalue(in)),'FaceColor',...
                          'interp','EdgeColor','none','FaceAlpha',...
                          opacity(2,in));
                else
                    error("normalVec should be 0, 1, or 2");
                end

            end

        end

        % Draw box around outside of unit cell
        draw_box(basis,'LineWidth',line_width,'EdgeColor',line_color);

        % Draw outer box around the entire plotted region 
        lims_diff = [alims(2)-alims(1); ...
                     blims(2)-blims(1); ...
                     clims(2)-clims(1)];
        outer_basis = basis .* lims_diff;
        lims_1 = [alims(1), blims(1), clims(1)];
        origin = lims_1 * basis;
        draw_box(outer_basis,origin,'LineWidth',line_width,...
                 'EdgeColor',outer_line_color);
        
        % Set colormap
        colormap(map{in})
        
        % Create colorbar:
        if isovalue(in) < max_comps(in) && ~hide_colorbars
            
            cb_start = isovalue(in);
            cb_end = max_comps(in);

            cblabel = round(linspace(cb_start,cb_end,cb_ticks),...
                            n_digits(in));
            tick_format = strcat('%.',string(n_digits(in)),'f');
            cblabel = compose(tick_format,cblabel');
            
            l_lngth = linspace(cb_start,cb_end,cb_ticks);
            cbh = colorbar;
            set(cbh,'ylim',[cb_start cb_end],'ytick',...
                l_lngth,'Yticklabel',cblabel,'fontsize',fontsize)

            title1 = strcat('\phi','_',mono_label(in));
            title(cbh,title1,'fontsize',fontsize*1.1);
             
        end
        
        % If hex3 == true, we plot two more unit cells rotated by 120° and
        % 240° around the z-axis, which is a common way to visualize
        % hexagonal unit cells. 
        if hex3
            
            for rotation = [120,240] % Angle of rotation, in degrees
                
                % Create rotation matrix to apply to our data coordinates
                rot_matrix = [ cosd(rotation), sind(rotation), 0;
                              -sind(rotation), cosd(rotation), 0;
                                            0,              0, 1];

                % Put x, y, and z data into a 2D array coord_set, where
                % each row represents the coordinates of one data point.
                % This allows us to apply the rotation matrix to our data
                size_grid = (grid(1)+1)*(grid(2)+1)*(grid(3)+1);
                coord_set = zeros(size_grid,3);
                counter = 0;
                
                for iz = 1:grid(3)+1
                    for iy = 1:grid(2)+1
                        for ix = 1:grid(1)+1
                            counter = counter +1;
                            coord_set(counter,1) = x(ix,iy,iz);
                            coord_set(counter,2) = y(ix,iy,iz);
                            coord_set(counter,3) = z(ix,iy,iz);
                        end
                    end
                end

                % Apply rotation matrix to data
                coord_set = coord_set*rot_matrix;
                
                % Put data back into 3D arrays x2, y2, and z2 for plotting
                counter = 0;
                x2 = zeros(size(x));
                y2 = zeros(size(y));
                z2 = zeros(size(z));
                for iz = 1:grid(3)+1
                    for iy = 1:grid(2)+1
                        for ix = 1:grid(1)+1
                            counter = counter +1;
                            x2(ix,iy,iz) = coord_set(counter,1) ;
                            y2(ix,iy,iz) = coord_set(counter,2) ;
                            z2(ix,iy,iz) = coord_set(counter,3) ;
                        end
                    end
                end
                clear coord_set

                % Plot the isosurface, isocaps, and unit cell outline for 
                % the rotated unit cell
                patch(isosurface(x2,y2,z2,R(:,:,:,in),isovalue(in)), ...
                      'FaceColor',map{in}(1,:),'EdgeColor','none', ...
                      'FaceAlpha',opacity(1,in));
                patch(isocaps(x2,y2,z2,R(:,:,:,in),isovalue(in)), ...
                      'FaceColor','interp','EdgeColor','none', ...
                      'FaceAlpha',opacity(2,in));
                basis_2 = basis * rot_matrix; % rotated basis vecs
                draw_box(basis_2,'LineWidth',line_width,...
                         'EdgeColor',line_color);

            end
        end

        % If a substrate and/or top wall are included, draw them
        if substrate || top_wall
    
            if (basis(1,3) > 1e-8) || (basis(2,3) > 1e-8)
                error("a and b basis vectors must be in the x-y plane")
            end
            
            % Setup
            box_basis = zeros(3,3);
            origin = [0,0,0];
            sc = 0.05; % scale factor determining how much wider the 
                       % substrate and top wall are than the actual 
                       % polymer unit cell
    
            xd = alims(2)-alims(1);
            yd = blims(2)-blims(1);
            zd = clims(2)-clims(1);

            box_basis(1:2,:) = (1+sc) * basis(1:2,:);
            box_basis(1,:) = box_basis(1,:) * xd;
            box_basis(2,:) = box_basis(2,:) * yd;
            
            if normalVec == -1 % not a thin film system
                box_basis(3,3) = sc * zd * basis(3,3);
            else % thin film
                box_basis(3,3) = min(z,[],'all') + 0.02;
                % the extra 0.02 allows the substrate/top wall to extend
                % just past the SCFT unit cell, so that you don't see the
                % outer box of the unit cell through the wall
            end
            
            origin(1) = min(x,[],'all') - ((sc/2) * xd * basis(1,1));
            origin(2) = min(y,[],'all') - ((sc/2) * yd * basis(2,2));
            
            if substrate
                % Draw substrate graphic
                origin(3) = min(z,[],'all')  - box_basis(3,3) - 0.005;
                % the gap of size 0.005 between the substrate and the film
                % is not visible in the graphic, but prevents the substrate
                % from being coplanar with the bottom of the unit cell,
                % which can cause undesirable visual effects
                draw_box(box_basis,origin,...
                         "FaceColor",substrate_color,...
                         "EdgeColor",substrate_line_color,...
                         "LineWidth",substrate_line_width);
            end
    
            if top_wall
                % Draw top wall graphic
                origin(1) = origin(1) + basis(3,1);
                origin(2) = origin(2) + basis(3,2);
                origin(3) = max(z,[],'all') + 0.005;
                draw_box(box_basis,origin,...
                         "FaceColor",top_wall_color,...
                         "EdgeColor",top_wall_line_color,...
                         "LineWidth",top_wall_line_width);
            end
    
        end

        view(view_angle); % Sets viewing angle

        % Fix data aspect ratio and set axis limits to "tight" setting
        daspect([1 1 1]);  % Equates the data aspect ratio for each axis
        axis tight;        % Snaps the axis to the data set
    
        % If thin film, extend axis limits to unit cell boundary
        if normalVec == 0
            xlim(alims*sum(basis(:,1)));
        elseif normalVec == 1
            ylim(blims*sum(basis(:,2)));
        elseif normalVec == 2
            zlim(clims*sum(basis(:,3)));
        end
        
        % Set aspect ratio of the axes to be equal to that of the plot
        pb = pbaspect; % Plot box aspect ratio
        [az,el] = view(); % viewing angle
        aspect_ratio = get_aspect_ratio(az,el,pb); % aspect ratio of plot
        set(gca,'Units','Points'); % Fixed units rather than reduced units
        ax_pos = get(gca,'Position');
        ax_pos(3) = ax_pos(4) * aspect_ratio;
        set(gca,'Position',ax_pos);
        
        set(gcf,'Units','Points');
        fig_pos = get(gcf,'position');
        
        % If we have a colorbar
        if isovalue(in) < max_comps(in) && ~hide_colorbars

            set(cbh,'Units','Points'); % Fixed units rather than reduced 
            
            % Estimate the width of our ticklabels
            [~,ind] = max(strlength(cblabel)); %Find longest ticklabel
            tmp = text(0,0,0,cblabel(ind),'fontsize',fontsize); 
            set(tmp,"Units","Points");
            txt_extent = get(tmp,"Extent"); % Find width of the text
            txt_width = txt_extent(3);
            delete(tmp) % Delete the temporary text we plotted

            % Update figure size to fit everything on the figure
            cb_pos = get(cbh,'Position');
            
            % Make figure wide enough to see colorbar
            fig_pos(3) = (cb_pos(1) + cb_pos(3)) + txt_width + 40;

            % Make figure taller to fit cb titles
            fig_pos(4) = fig_pos(4) + (fontsize*1.1); 

            set(cbh,'Location','Manual'); % fix cb position
            
        else

            % Make figure width agree with axis width
            fig_pos(3) = ax_pos(1) + ax_pos(3) + 40;
            
            % Also make figure a little taller, just for aesthetics
            fig_pos(4) = fig_pos(4) + (fontsize*1.1);
            
        end

        % Set figure size
        set(gcf,'position',fig_pos);

        % Return to default units for all graphics objects
        drawnow % this refreshes all graphics objects (processes callbacks)
        set(gca,'Units','Normalized')
        set(gcf,'Units','Normalized')
        if isovalue(in) < max_comps(in) && ~hide_colorbars
            set(cbh,'Units','Normalized')
        end

        % Add light if desired
        if light_on
            light('position',[-1 -1 1]);
            lighting gouraud;
        end
    
        % Hide axes if desired
        if hide_axes
            set(gca,'visible','off')
        end

        % Save figure if a filename is provided
        if savefile ~= ""
            [f_path,f_name,ext] = fileparts(savefile);
            save_filename = fullfile(f_path, ...
                                strcat(f_name,mono_label(in),ext));
            if (ext == ".fig") || (ext == ".m")
                saveas(gcf,save_filename);
            else
                exportgraphics(gcf,save_filename,"resolution",resolution);
            end
        end
        
        % Prep figure for interactive use
        rotate3d on

        drawnow
        hold off

    end
end
