% This function creates all of the plots that are in this package of
% scripts, for the data stored in an rgrid file with its filename provided
% as an input. This includes the individual composition profiles, the
% composite composition profile, the scattering plot, the 1D line profile,
% and the 2D contour plot. Name-value pairs can be provided to specify the
% details of these plots, otherwise default values will be used. 
function polymer_visual(filename,options)
    %% Input arguments
    arguments
        % string that represents the path to the rgrid file containing the 
        % data that will be plotted
        filename
        
        % ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        % Name-Value Pairs:
        % ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        % savefile is a filename to which the figures will be saved.
        % The file extension provided (e.g. ".fig" or ".png") will be used
        % to determine the type of file to save. Since this function
        % typically generates more than 1 figure, we modify the filename
        % slightly for each figure that is generated/saved. If left empty 
        % (which is the default behavior), the figures are not saved.
        options.savefile = "";

        % resolution is a number that specifies the resolution of the
        % figure that is saved (if options.savefile is specified), in dots
        % per inch (dpi). Default value is 300. If set to 0, file is saved
        % at screen resolution.
        options.resolution = 300;

        % fontsize specifies the FontSize parameter for the axis on which
        % data are plotted. Default value is 14. Other fontsizes (legends,
        % titles, colorbars, etc.) are modified to match.
        options.fontsize = 14;
        
        % hex3 is a boolean indicating whether to plot 3 unit cells for a
        % hexagonal system rather than 1.
        options.hex3 = false

        % light is a boolean indicating whether to insert a "light" object
        % into the plot (adds shadows that can make 3d structure clearer,
        % but invalidates the accuracy of the colorbar).
        options.light = false;

        % view is a 1, 2, or 3-element vector that specifies the viewing
        % angle of the 3D density profiles. If this is included, we call 
        % view(options.view) to set the viewing angle, so options.view must
        % be something that complies with the view() function. If view = 2
        % or view = 3, the view will be the default 2D or 3D view,
        % respectively. If view is a 2-element vector, the two elements
        % correspond to the azimuth and elevation angles, respectively. If
        % view is a 3-element vector, the values represent a vector that
        % points from the origin to the viewer. 
        options.view = 3;

        % If hide_axes is set to true, the plot will not contain the tick 
        % marks, title, etc. by setting the "visible" property of the axes
        % to "off".
        options.hide_axes = false;
        
        % isovalue is an array of isovalues representing the minimum volume
        % fraction to show on plot. One value for each species. If not
        % specified, we call get_isovalues.m to calculate them 
        % automatically.
        options.isovalue
        
        % mono_label contains labels for each monomer species. If not
        % specified, we use ["A","B","C",...] as the default behavior.
        options.mono_label
         
        % opacity contains values of opacity to plot for each species. 2
        % opacities are specified for each species i: opacity(1,i) is the
        % opacity of the interior of the domains, while opacity(2,i) is the
        % opacity of the exterior (caps) of the domains. If unspecified,
        % all values default to 1 (completely opaque).
        options.opacity
        
        % map is a cell array containing a colormap for each species.
        % map{i} is the colormap for species i. If unspecified, we use the
        % default colormaps generated by get_colormaps.m. 
        options.map

        % colors defines the color of each line in the isovalue plot and
        % the 1D line profile. colors[i,:] is an RGB triplet that is the
        % color for the line profile of species i. If not provided, the
        % default colors will be the first color listed in the colormap for
        % each species.
        options.colors
        
        % line_width is the value for "LineWidth" used to draw the outer 
        % box of the unit cell. Default is 1
        options.line_width = 1
        
        % line_color is the value for "EdgeColor" used to draw the outer
        % box of the unit cell. Default is gray. Can be a color string as
        % well, as long as Matlab can interpret it properly as a color,
        % e.g. "y", "yellow", or "#FFFF00" (hexadecimal color code).
        options.line_color = [0.5,0.5,0.5]

        % alim, blim, and clim are 2-element arrays specifying the upper 
        % and lower limits of the region to plot in the 3D composition
        % profiles, in reduced coordinates. Default value is [0,1] for
        % each, which plots a single unit cell. If, say, alim = [0,2], then
        % the profiles will show 2 unit cells along the direction of the 
        % lattice basis vector a. This only affects the 3D composition 
        % profiles, not the contour plots, line profiles, or scattering
        % plot.
        options.alim = [0,1];
        options.blim = [0,1];
        options.clim = [0,1];
        
        % species is an array that contains the indices for each monomer
        % species to plot on the composite density profile. So, if the data
        % set contains 4 species but only the first and third should be
        % plotted, species = [1,3]. The default behavior is to plot all
        % species.
        options.species;

        % cb_ticks is the number of ticks on the colorbar, default is 10.
        options.cb_ticks = 10;
        
        % cb_rows defines the number of rows of colorbars that are
        % shown on the figure. For example, if there are 8 colorbars on the
        % figure, cb_rows = 2 will result in a 2x4 grid of colorbars
        % being shown on the figure, as opposed to the default 1x8 grid.
        options.cb_rows = 1;

        % n_digits is the number of digits past the decimal point to use
        % for the colorbar tick labels. Can be specified as a scalar, or as
        % an array of length n_mnr (one value per monomer species plotted)
        % if you want a different # of digits for each colorbar. Default is
        % 3.
        options.n_digits = 3;

        % isovalue_plot is a boolean. If true, will construct an isovalue
        % plot (assuming isovalues are not provided), otherwise will not.
        options.isovalue_plot = false;

        % scatterers is a list containing the indices for each species that
        % will be treated as the "scattering object(s)" in determining the
        % scattering plot. E.g., if scatterers = [1,3], the function
        % scattering_plot.m will add the volume fractions of species 1 and
        % species 3, and the Fourier transform of this sum will be the
        % resulting scattering plot that is generated. Default is just 1.
        options.scatterers = 1;

        % hkls is an array in which each row corresponds to the hkl indices
        % of one scattering peak to include on the scattering plot (if it
        % is an actual peak). If hkl is not provided, the code generates
        % this array to include all values 5 or lower for h, k, and l.
        options.hkls = [];

        % theta_plot is a boolean, where we plot our scattering peaks as a
        % function of 2θ if it is true. Otherwise, we plot it as a function
        % of q.
        options.theta_plot = false;
        
        % units is a string, which represents the units of length used in
        % defining x, y, and z. This will be used in the x-axis label of
        % the plot, if provided. So, if units = 'Å', the x-axis label will
        % read 'q [Å^{-1}]'. If units = '', the label will just be 'q'.
        options.units = "";

        % Option to turn off the hkl labeling of the peaks in the
        % scattering plot
        options.no_labels = false;

        % direc is the direction of the vector along which we trace the
        % line profile. This is defined in reduced coordinates. The length
        % of the vector direc also defines the length of the line along
        % which our profile is traced.
        options.direc = [1 1 1];
        
        % startloc is an optional input for creating the 1D line profile
        % that specifies the starting point of our line profile. The
        % default position is [0 0 0].
        options.startloc = [0 0 0];

        % contourvecs is an array with 3 rows: the first row defines the
        % gridpoint corresponding to the lower-left corner of the contour 
        % plot in reduced coordinates (error will occur if this is not on a
        % gridpoint). The second row is a vector defining the direction and
        % magnitude of the x-axis of the contour plot. The third row is the
        % same but for the y-axis. If the angle between these two vectors
        % is not 90°, the function will automatically impose a slant to the
        % contour plot. Default behavior is to create a contour plot of the
        % [1 -1 0] plane.
        options.contourvecs = [0 0 0; % Starting corner of contour plot
                               1 1 0; % Direction of x-axis of contour plot
                               0 0 1];% Direction of y-axis of contour plot

        % phase is a string containing the name of the phase being plotted.
        % This is used to plot the voronoi partition between particle
        % sites on the 2D contour plot, based on hard-coded particle sites
        % that are listed in utilities/get_atomloc.m. If the phase name is
        % provided but does not match any in get_atomloc, an error will
        % occur. 
        options.phase = "";

        % If your SCFT result is a thin film, you should include
        % film_params as an input to apply a thin film correction.
        %
        % film_params is an array with 4 entries. The first 3 entries
        % correspond to the 3 required parameters in pscfpp that are needed
        % to define a Wall object: normalVec, interfaceThickness, and
        % wallThickness. See pscfpp documentation for details about what
        % each of these three parameters means. The fourth entry is a
        % boolean (i.e. 0 for false, 1 for true) that indicates whether or
        % not to rotate the figure to make the z axis orthogonal to the
        % wall. If this film_params input is included, the code will apply
        % a correction to the plot to make the figure look good as a thin
        % film. If it is not included, it is assumed that the data being
        % plotted are not under a thin film constraint.
        options.film_params = [];

        % substrate is a boolean indicating whether or not to add a box
        % in the composition profiles underneath the unit cell that looks 
        % like a substrate on which the polymer rests. The box color, line
        % edge line color, and edge line width can be set by the inputs
        % substrate_color, substrate_line_color, and substrate_line_width, 
        % respectively. 
        %
        % This feature is compatible with all other features, including the
        % thin film correction. The only requirement that we enforce on the
        % other inputs is that clim(1) must be 0. 
        options.substrate = false;
        options.substrate_color = [0.5,0.5,0.5];
        options.substrate_line_color = 'k';
        options.substrate_line_width = 1;
        
        % top_wall is basically identical to substrate, except it places a
        % box on top of the unit cell rather than below it. The appearance
        % of the top_wall can be altered with top_wall_color,
        % top_wall_line_color, and top_wall_line_width. By default, these
        % appearance-related parameters are set to match the corresponding
        % parameters for the substrate.
        options.top_wall = false;
        options.top_wall_color;
        options.top_wall_line_color;
        options.top_wall_line_width;
    end
    
    %% Setup

    tic
    close all;
    
    % Ensure that the code below can access our utilities
    [filepath,~,~] = fileparts(mfilename('fullpath'));
    addpath(filepath+"/utilities")

    % Read in the rgrid file
    [R,x,y,z,dim,lattype] = read_rgrid(filename);

    basis = [x(end,1,1),y(end,1,1),z(end,1,1);
             x(1,end,1),y(1,end,1),z(1,end,1);
             x(1,1,end),y(1,1,end),z(1,1,end)];
    n_mnr = size(R,4);

    if lattype ~= "hexagonal" && options.hex3
        error("hex3 is true but crystal system is not hexagonal")
    end

    % Get other parameters needed for composition profiles, using
    % default values if they are not provided as name-value inputs:
    if ~isfield(options,'species')
        options.species = 1:n_mnr;
    end
    
    if ~isfield(options,'mono_label')
        options.mono_label = char(1,n_mnr);
        for in = 1:n_mnr
            options.mono_label(in) = char('A'+in-1);
        end
    end

    if ~isfield(options,'opacity')
        options.opacity = ones(2,n_mnr);
    end
    
    if ~isfield(options,'map')
        options.map = get_colormaps();
    end

    if ~isfield(options,'colors')
        options.colors = zeros(max(size(options.map)),3);
        for map = 1:size(options.colors,1)
            options.colors(map,:) = options.map{map}(1,:);
        end
    end
    
    if ~isfield(options,'isovalue')
        if n_mnr > 1
            options.isovalue = get_isovalues(R,dim,'plot',...
                               options.isovalue_plot,'colors',...
                               options.colors,'fontsize',options.fontsize);
        else
            options.isovalue = 0.5;
        end
    end

    % If style inputs are unset, make them match the substrate
    if ~isfield(options,"top_wall_color")
        options.top_wall_color = options.substrate_color;
    end
    if ~isfield(options,"top_wall_line_color")
        options.top_wall_line_color = options.substrate_line_color;
    end
    if ~isfield(options,"top_wall_line_width")
        options.top_wall_line_width = options.substrate_line_width;
    end
    
    %% Call subfunctions to make all figures

    % Draw individual density profiles for each monomer species specified
    % in mono_disp:
    individual_profiles(R,x,y,z,dim,"isovalue",options.isovalue,"map",...
                        options.map,"mono_label",options.mono_label,...
                        "opacity",options.opacity,"hex3",options.hex3,...
                        "line_width",options.line_width,"line_color",...
                        options.line_color,"n_digits",options.n_digits,...
                        "cb_ticks",options.cb_ticks,"fontsize",...
                        options.fontsize,"savefile",options.savefile,...
                        "light",options.light,"hide_axes",...
                        options.hide_axes,"view",options.view,...
                        "film_params",options.film_params,"resolution",...
                        options.resolution,"alim",options.alim,"blim",...
                        options.blim,"clim",options.clim,"substrate",...
                        options.substrate,"substrate_color",...
                        options.substrate_color,"substrate_line_color",...
                        options.substrate_line_color,...
                        "substrate_line_width",...
                        options.substrate_line_width,...
                        "top_wall",options.top_wall,"top_wall_color",...
                        options.top_wall_color,"top_wall_line_color",...
                        options.top_wall_line_color,...
                        "top_wall_line_width",options.top_wall_line_width);

    % Draw the Composite Density Profile
    composite_profile(R,x,y,z,dim,"isovalue",options.isovalue,"map",...
                      options.map,"mono_label",options.mono_label,...
                      "opacity",options.opacity,"hex3",options.hex3,...
                      "line_width",options.line_width,"line_color",...
                      options.line_color,"species",options.species,...
                      "cb_ticks",options.cb_ticks,"fontsize",...
                      options.fontsize,"savefile",options.savefile,...
                      "n_digits",options.n_digits,"cb_rows",...
                      options.cb_rows,"light",options.light,"hide_axes",...
                      options.hide_axes,"view",options.view,...
                      "film_params",options.film_params,"resolution",...
                      options.resolution,"alim",options.alim,"blim",...
                      options.blim,"clim",options.clim,"substrate",...
                      options.substrate,"substrate_color",...
                      options.substrate_color,"substrate_line_color",...
                      options.substrate_line_color,...
                      "substrate_line_width",...
                      options.substrate_line_width,...
                      "top_wall",options.top_wall,"top_wall_color",...
                      options.top_wall_color,"top_wall_line_color",...
                      options.top_wall_line_color,...
                      "top_wall_line_width",options.top_wall_line_width);

    % Draw the scattering plot
    if options.savefile ~= ""
        [f_path,f_name,f_ext] = fileparts(options.savefile);
        savefile_scat = fullfile(f_path,strcat(f_name,'_scat',f_ext));
        writefile_scat = fullfile(f_path,strcat(f_name,'_data','.txt'));
    else
        savefile_scat = "";
        writefile_scat = "";
    end
    scattering_plot(R,x,y,z,'scatterers',options.scatterers,'fontsize',...
                    options.fontsize,'savefile',savefile_scat,...
                    'theta_plot',options.theta_plot,'units',...
                    options.units,'writefile',writefile_scat,'hkls', ...
                    options.hkls,'film_params',options.film_params,...
                    'resolution',options.resolution,'no_labels',...
                    options.no_labels);
    
    % Draw the 1-D Line Profile
    if options.savefile ~= ""
        savefile_1D = fullfile(f_path,strcat(f_name,'_1D',f_ext));
    else
        savefile_1D = "";
    end
    if ~isempty(options.film_params)
        coords = {x,y,z};
    else
        coords = {};
    end
    line_profile(R,options.direc,options.startloc,'savefile',...
                 savefile_1D,'fontsize',options.fontsize,'mono_label',...
                 options.mono_label,'colors',options.colors,...
                 'film_params',options.film_params,'coords',coords,...
                 'resolution',options.resolution);

    % Create the 2-D Contour Plot
    if options.savefile ~= ""
        savefile_2D = fullfile(f_path,strcat(f_name,'_2D',f_ext));
    else
        savefile_2D = "";
    end
    contour_plot(R,options.contourvecs,basis,'fontsize',...
                 options.fontsize,'mono_label',options.mono_label,'map',...
                 options.map,'isovalue',options.isovalue,'cb_ticks',...
                 options.cb_ticks,'cb_rows',options.cb_rows,'n_digits',...
                 options.n_digits,'phase',options.phase,'savefile',...
                 savefile_2D,'film_params',options.film_params,'coords',...
                 coords,'resolution',options.resolution);

    toc

end
